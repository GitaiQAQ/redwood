name: Release

on:
    push:
        tags:
            - 'release/*'

jobs:
    create_release:
        name: Create release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
            - name: Create release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: ${{ github.ref }}
                  draft: false
                  prerelease: true

    build_redwood:
        name: Build Redwood
        needs: create_release
        strategy:
            fail-fast: false
            matrix:
                platform: [ubuntu-latest, macos-11, macos-10.15, windows-latest]
                include:
                    - platform:    ubuntu-latest
                      app_name:    redwood
                      zip_name:    redwood-ubuntu.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-11
                      app_name:    redwood
                      zip_name:    redwood-macos-11.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-10.15
                      app_name:    redwood
                      zip_name:    redwood-macos-10.15.zip
                      go_exe:      go
                      build_flags:
                    - platform:    windows-latest
                      app_name:    redwood.exe
                      zip_name:    redwood-windows-latest.zip
                      go_exe:      go
                      build_flags: --tags otto
        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v2

            - uses: actions/setup-go@v2
              with:
                go-version: '^1.17.x'

            - name: Cache Go vendor packages
              uses: actions/cache@v2
              with:
                  path: ${{ env.GOPATH }}
                  key: go-mod-${{ env.CACHE_VERSION }}-${{ hashFiles('go.sum') }}
                  restore-keys: |
                    go-mod-${{ env.CACHE_VERSION }}

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download

            - name: Get Yarn cache directory path
              id:   yarn-cache-dir-path
              run:  echo "::set-output name=dir::$(yarn cache dir)"

            - name: Build redwood.js
              run:  make redwood.js/dist

            - name: Cache redwood.js dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-redwood.js-${{ env.CACHE_VERSION }}-${{ hashFiles('./redwood.js/yarn.lock') }}
                  restore-keys: |
                    yarn-redwood.js-${{ env.CACHE_VERSION }}

            - name: Build redwood
              run:  ${{ matrix.go_exe }} build ${{ matrix.build_flags }} -o ./${{ matrix.app_name }} .
              working-directory: cmd/redwood

            # - name: Upload artifacts
            #   uses: actions/upload-artifact@v2
            #   with:
            #       name: ${{ matrix.app_name }}
            #       path: cmd/redwood/${{ matrix.app_name }}

            # - name: Upload release assets
            #   uses: actions/upload-release-asset@v1
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #   with:
            #       upload_url: ${{ needs.create_release.outputs.upload_url }}
            #       asset_name: ${{ matrix.app_name }}
            #       asset_path: ./cmd/redwood/redwood
            #       asset_content_type: application/octet-stream
            #######################################3
            - name: Zip
              run:  zip -qq -r ${{ matrix.zip_name }} ${{ matrix.app_name }}
              working-directory: cmd/redwood

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.zip_name }}
                  path: cmd/redwood/${{ matrix.zip_name }}

            - name: Upload release assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: ${{ matrix.zip_name }}
                  asset_path: cmd/redwood/${{ matrix.zip_name }}
                  asset_content_type: application/zip

    build_hush:
        name: Build Hush
        needs: create_release
        strategy:
            matrix:
                platform: [ubuntu-latest, macos-11, macos-10.15, windows-latest]
                include:
                    - platform:    ubuntu-latest
                      app_name:    hush
                      zip_name:    hush-ubuntu.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-11
                      app_name:    Hush.app/
                      zip_name:    hush-macos-11.zip
                      go_exe:      go
                      build_flags:
                    - platform:    macos-10.15
                      app_name:    Hush.app/
                      zip_name:    hush-macos-10.15.zip
                      go_exe:      go
                      build_flags:
                    - platform:    windows-latest
                      app_name:    Hush.exe
                      zip_name:    hush-windows-latest.zip
                      go_exe:      go
                      build_flags: --tags otto -ldflags="-H windowsgui"

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v2

            - uses: actions/setup-go@v2
              with:
                go-version: '^1.16.7'

            - name: Cache Go vendor packages
              uses: actions/cache@v2
              with:
                  path: ${{ env.GOPATH }}
                  key: go-mod-${{ env.CACHE_VERSION }}-${{ hashFiles('demos/desktop-chat-app/go.sum') }}
                  restore-keys: |
                    go-mod-${{ env.CACHE_VERSION }}

            - name: Download Go vendor packages
              run:  ${{ matrix.go_exe }} mod download
              working-directory: demos/desktop-chat-app

            - name: Install system dependencies
              run:  sudo apt update && sudo apt install -y libwebkit2gtk-4.0-dev
              if:   ${{ matrix.platform == 'ubuntu-latest' }}

            - name: Get Yarn cache directory path
              id:   yarn-cache-dir-path
              run:  echo "::set-output name=dir::$(yarn cache dir)"

            - name: Cache redwood.js dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-redwood.js-${{ env.CACHE_VERSION }}-${{ hashFiles('./redwood.js/yarn.lock') }}
                  restore-keys: |
                    yarn-redwood.js-${{ env.CACHE_VERSION }}

            - name: Build redwood.js
              run: make redwood.js/dist

            - name: Cache desktop-chat-app/frontend dependencies
              uses: actions/cache@v2
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: yarn-desktop-chat-app-${{ env.CACHE_VERSION }}-${{ hashFiles('./demos/desktop-chat-app/frontend/yarn.lock') }}
                  restore-keys: |
                    yarn-desktop-chat-app-${{ env.CACHE_VERSION }}

            - name: Install desktop-chat-app/frontend dependencies
              run:  yarn install --frozen-lockfile --prefer-offline
              working-directory: demos/desktop-chat-app/frontend

            - name: Build frontend
              run:  yarn build
              working-directory: demos/desktop-chat-app/frontend

            - name: Build Hush
              run:  ${{ matrix.go_exe }} build ${{ matrix.build_flags }} -o ./${{ matrix.app_name }} .
              working-directory: demos/desktop-chat-app

            - name: Package macOS app
              run:  mkdir -p ./packaging/Hush.app/Contents/MacOS && mv ./hush ./packaging/Hush.app/Contents/MacOS/Hush && chmod +x ./packaging/Hush.app/Contents/MacOS/Hush && mv ./packaging/Hush.app .
              if:   ${{ matrix.platform == 'macos-11' || matrix.platform == 'macos-10.15' }}
              working-directory: demos/desktop-chat-app

            - name: Zip
              run:  zip -qq -r ${{ matrix.zip_name }} ${{ matrix.app_name }}
              working-directory: demos/desktop-chat-app

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.zip_name }}
                  path: demos/desktop-chat-app/${{ matrix.zip_name }}

            - name: Upload release assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create_release.outputs.upload_url }}
                  asset_name: ${{ matrix.zip_name }}
                  asset_path: demos/desktop-chat-app/${{ matrix.zip_name }}
                  asset_content_type: application/zip
