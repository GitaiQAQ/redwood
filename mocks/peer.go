// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	crypto "redwood.dev/crypto"

	mock "github.com/stretchr/testify/mock"

	redwood "redwood.dev"

	time "time"

	tree "redwood.dev/tree"

	types "redwood.dev/types"

	utils "redwood.dev/utils"
)

// Peer is an autogenerated mock type for the Peer type
type Peer struct {
	mock.Mock
}

// Ack provides a mock function with given fields: stateURI, txID
func (_m *Peer) Ack(stateURI string, txID types.ID) error {
	ret := _m.Called(stateURI, txID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.ID) error); ok {
		r0 = rf(stateURI, txID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStateURI provides a mock function with given fields: stateURI
func (_m *Peer) AddStateURI(stateURI string) {
	_m.Called(stateURI)
}

// Addresses provides a mock function with given fields:
func (_m *Peer) Addresses() []types.Address {
	ret := _m.Called()

	var r0 []types.Address
	if rf, ok := ret.Get(0).(func() []types.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Address)
		}
	}

	return r0
}

// AnnouncePeers provides a mock function with given fields: ctx, peerDialInfos
func (_m *Peer) AnnouncePeers(ctx context.Context, peerDialInfos []redwood.PeerDialInfo) error {
	ret := _m.Called(ctx, peerDialInfos)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []redwood.PeerDialInfo) error); ok {
		r0 = rf(ctx, peerDialInfos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChallengeIdentity provides a mock function with given fields: challengeMsg
func (_m *Peer) ChallengeIdentity(challengeMsg types.ChallengeMsg) error {
	ret := _m.Called(challengeMsg)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ChallengeMsg) error); ok {
		r0 = rf(challengeMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Peer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DialInfo provides a mock function with given fields:
func (_m *Peer) DialInfo() redwood.PeerDialInfo {
	ret := _m.Called()

	var r0 redwood.PeerDialInfo
	if rf, ok := ret.Get(0).(func() redwood.PeerDialInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(redwood.PeerDialInfo)
	}

	return r0
}

// EnsureConnected provides a mock function with given fields: ctx
func (_m *Peer) EnsureConnected(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Failures provides a mock function with given fields:
func (_m *Peer) Failures() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// FetchRef provides a mock function with given fields: refID
func (_m *Peer) FetchRef(refID types.RefID) error {
	ret := _m.Called(refID)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.RefID) error); ok {
		r0 = rf(refID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LastContact provides a mock function with given fields:
func (_m *Peer) LastContact() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// LastFailure provides a mock function with given fields:
func (_m *Peer) LastFailure() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// PublicKeys provides a mock function with given fields: addr
func (_m *Peer) PublicKeys(addr types.Address) (crypto.SigningPublicKey, crypto.EncryptingPublicKey) {
	ret := _m.Called(addr)

	var r0 crypto.SigningPublicKey
	if rf, ok := ret.Get(0).(func(types.Address) crypto.SigningPublicKey); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.SigningPublicKey)
		}
	}

	var r1 crypto.EncryptingPublicKey
	if rf, ok := ret.Get(1).(func(types.Address) crypto.EncryptingPublicKey); ok {
		r1 = rf(addr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(crypto.EncryptingPublicKey)
		}
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, tx, state, leaves
func (_m *Peer) Put(ctx context.Context, tx *redwood.Tx, state tree.Node, leaves []types.ID) error {
	ret := _m.Called(ctx, tx, state, leaves)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *redwood.Tx, tree.Node, []types.ID) error); ok {
		r0 = rf(ctx, tx, state, leaves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *Peer) Ready() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReceiveChallengeIdentityResponse provides a mock function with given fields:
func (_m *Peer) ReceiveChallengeIdentityResponse() ([]redwood.ChallengeIdentityResponse, error) {
	ret := _m.Called()

	var r0 []redwood.ChallengeIdentityResponse
	if rf, ok := ret.Get(0).(func() []redwood.ChallengeIdentityResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redwood.ChallengeIdentityResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveRefHeader provides a mock function with given fields:
func (_m *Peer) ReceiveRefHeader() (redwood.FetchRefResponseHeader, error) {
	ret := _m.Called()

	var r0 redwood.FetchRefResponseHeader
	if rf, ok := ret.Get(0).(func() redwood.FetchRefResponseHeader); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(redwood.FetchRefResponseHeader)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveRefPacket provides a mock function with given fields:
func (_m *Peer) ReceiveRefPacket() (redwood.FetchRefResponseBody, error) {
	ret := _m.Called()

	var r0 redwood.FetchRefResponseBody
	if rf, ok := ret.Get(0).(func() redwood.FetchRefResponseBody); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(redwood.FetchRefResponseBody)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveStateURI provides a mock function with given fields: stateURI
func (_m *Peer) RemoveStateURI(stateURI string) {
	_m.Called(stateURI)
}

// RespondChallengeIdentity provides a mock function with given fields: verifyAddressResponse
func (_m *Peer) RespondChallengeIdentity(verifyAddressResponse []redwood.ChallengeIdentityResponse) error {
	ret := _m.Called(verifyAddressResponse)

	var r0 error
	if rf, ok := ret.Get(0).(func([]redwood.ChallengeIdentityResponse) error); ok {
		r0 = rf(verifyAddressResponse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendRefHeader provides a mock function with given fields:
func (_m *Peer) SendRefHeader() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendRefPacket provides a mock function with given fields: data, end
func (_m *Peer) SendRefPacket(data []byte, end bool) error {
	ret := _m.Called(data, end)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, bool) error); ok {
		r0 = rf(data, end)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateURIs provides a mock function with given fields:
func (_m *Peer) StateURIs() utils.StringSet {
	ret := _m.Called()

	var r0 utils.StringSet
	if rf, ok := ret.Get(0).(func() utils.StringSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.StringSet)
		}
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, stateURI
func (_m *Peer) Subscribe(ctx context.Context, stateURI string) (redwood.ReadableSubscription, error) {
	ret := _m.Called(ctx, stateURI)

	var r0 redwood.ReadableSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string) redwood.ReadableSubscription); ok {
		r0 = rf(ctx, stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redwood.ReadableSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transport provides a mock function with given fields:
func (_m *Peer) Transport() redwood.Transport {
	ret := _m.Called()

	var r0 redwood.Transport
	if rf, ok := ret.Get(0).(func() redwood.Transport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redwood.Transport)
		}
	}

	return r0
}

// UpdateConnStats provides a mock function with given fields: success
func (_m *Peer) UpdateConnStats(success bool) {
	_m.Called(success)
}
