// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: libp2p.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	pb "redwood.dev/blob/pb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	// Types that are valid to be assigned to Msg:
	//	*Msg_FetchBlobManifest
	//	*Msg_SendBlobManifest
	//	*Msg_FetchBlobChunk
	//	*Msg_SendBlobChunk
	Msg isMsg_Msg `protobuf_oneof:"msg"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Msg interface {
	isMsg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Msg_FetchBlobManifest struct {
	FetchBlobManifest *MsgFetchBlobManifest `protobuf:"bytes,1,opt,name=fetchBlobManifest,proto3,oneof" json:"fetchBlobManifest,omitempty"`
}
type Msg_SendBlobManifest struct {
	SendBlobManifest *MsgSendBlobManifest `protobuf:"bytes,2,opt,name=sendBlobManifest,proto3,oneof" json:"sendBlobManifest,omitempty"`
}
type Msg_FetchBlobChunk struct {
	FetchBlobChunk *MsgFetchBlobChunk `protobuf:"bytes,3,opt,name=fetchBlobChunk,proto3,oneof" json:"fetchBlobChunk,omitempty"`
}
type Msg_SendBlobChunk struct {
	SendBlobChunk *MsgSendBlobChunk `protobuf:"bytes,4,opt,name=sendBlobChunk,proto3,oneof" json:"sendBlobChunk,omitempty"`
}

func (*Msg_FetchBlobManifest) isMsg_Msg() {}
func (*Msg_SendBlobManifest) isMsg_Msg()  {}
func (*Msg_FetchBlobChunk) isMsg_Msg()    {}
func (*Msg_SendBlobChunk) isMsg_Msg()     {}

func (m *Msg) GetMsg() isMsg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Msg) GetFetchBlobManifest() *MsgFetchBlobManifest {
	if x, ok := m.GetMsg().(*Msg_FetchBlobManifest); ok {
		return x.FetchBlobManifest
	}
	return nil
}

func (m *Msg) GetSendBlobManifest() *MsgSendBlobManifest {
	if x, ok := m.GetMsg().(*Msg_SendBlobManifest); ok {
		return x.SendBlobManifest
	}
	return nil
}

func (m *Msg) GetFetchBlobChunk() *MsgFetchBlobChunk {
	if x, ok := m.GetMsg().(*Msg_FetchBlobChunk); ok {
		return x.FetchBlobChunk
	}
	return nil
}

func (m *Msg) GetSendBlobChunk() *MsgSendBlobChunk {
	if x, ok := m.GetMsg().(*Msg_SendBlobChunk); ok {
		return x.SendBlobChunk
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Msg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Msg_FetchBlobManifest)(nil),
		(*Msg_SendBlobManifest)(nil),
		(*Msg_FetchBlobChunk)(nil),
		(*Msg_SendBlobChunk)(nil),
	}
}

type MsgFetchBlobManifest struct {
	Id *pb.BlobID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgFetchBlobManifest) Reset()      { *m = MsgFetchBlobManifest{} }
func (*MsgFetchBlobManifest) ProtoMessage() {}
func (*MsgFetchBlobManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{1}
}
func (m *MsgFetchBlobManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchBlobManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchBlobManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchBlobManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchBlobManifest.Merge(m, src)
}
func (m *MsgFetchBlobManifest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchBlobManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchBlobManifest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchBlobManifest proto.InternalMessageInfo

func (m *MsgFetchBlobManifest) GetId() *pb.BlobID {
	if m != nil {
		return m.Id
	}
	return nil
}

type MsgSendBlobManifest struct {
	Manifest *pb.Manifest `protobuf:"bytes,1,opt,name=manifest,proto3" json:"manifest,omitempty"`
	Exists   bool         `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *MsgSendBlobManifest) Reset()      { *m = MsgSendBlobManifest{} }
func (*MsgSendBlobManifest) ProtoMessage() {}
func (*MsgSendBlobManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{2}
}
func (m *MsgSendBlobManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendBlobManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendBlobManifest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendBlobManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendBlobManifest.Merge(m, src)
}
func (m *MsgSendBlobManifest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendBlobManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendBlobManifest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendBlobManifest proto.InternalMessageInfo

func (m *MsgSendBlobManifest) GetManifest() *pb.Manifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *MsgSendBlobManifest) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type MsgFetchBlobChunk struct {
	Sha3 []byte `protobuf:"bytes,1,opt,name=sha3,proto3" json:"sha3,omitempty"`
}

func (m *MsgFetchBlobChunk) Reset()      { *m = MsgFetchBlobChunk{} }
func (*MsgFetchBlobChunk) ProtoMessage() {}
func (*MsgFetchBlobChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{3}
}
func (m *MsgFetchBlobChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFetchBlobChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFetchBlobChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFetchBlobChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFetchBlobChunk.Merge(m, src)
}
func (m *MsgFetchBlobChunk) XXX_Size() int {
	return m.Size()
}
func (m *MsgFetchBlobChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFetchBlobChunk.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFetchBlobChunk proto.InternalMessageInfo

func (m *MsgFetchBlobChunk) GetSha3() []byte {
	if m != nil {
		return m.Sha3
	}
	return nil
}

type MsgSendBlobChunk struct {
	Chunk  []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Exists bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *MsgSendBlobChunk) Reset()      { *m = MsgSendBlobChunk{} }
func (*MsgSendBlobChunk) ProtoMessage() {}
func (*MsgSendBlobChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad2813fa2bf04bd, []int{4}
}
func (m *MsgSendBlobChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendBlobChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendBlobChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendBlobChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendBlobChunk.Merge(m, src)
}
func (m *MsgSendBlobChunk) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendBlobChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendBlobChunk.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendBlobChunk proto.InternalMessageInfo

func (m *MsgSendBlobChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (m *MsgSendBlobChunk) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func init() {
	proto.RegisterType((*Msg)(nil), "Redwood.swarm.libp2p.Msg")
	proto.RegisterType((*MsgFetchBlobManifest)(nil), "Redwood.swarm.libp2p.MsgFetchBlobManifest")
	proto.RegisterType((*MsgSendBlobManifest)(nil), "Redwood.swarm.libp2p.MsgSendBlobManifest")
	proto.RegisterType((*MsgFetchBlobChunk)(nil), "Redwood.swarm.libp2p.MsgFetchBlobChunk")
	proto.RegisterType((*MsgSendBlobChunk)(nil), "Redwood.swarm.libp2p.MsgSendBlobChunk")
}

func init() { proto.RegisterFile("libp2p.proto", fileDescriptor_cad2813fa2bf04bd) }

var fileDescriptor_cad2813fa2bf04bd = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x67, 0xca, 0x9f, 0x90, 0xfb, 0xf1, 0x19, 0x18, 0x1b, 0x42, 0x34, 0x99, 0x98, 0xc6,
	0x88, 0xba, 0x68, 0x13, 0xd8, 0xba, 0x30, 0x68, 0x0c, 0x2e, 0x30, 0x61, 0x5c, 0x98, 0xb0, 0x6b,
	0x69, 0x81, 0x46, 0xa0, 0x0d, 0x53, 0xc5, 0xa5, 0x8f, 0xe0, 0x63, 0xf8, 0x28, 0x2e, 0x59, 0xb2,
	0x94, 0xc1, 0x85, 0x4b, 0x1e, 0xc1, 0x30, 0x05, 0x92, 0x16, 0x08, 0xab, 0x76, 0xd2, 0x73, 0x7f,
	0x67, 0xee, 0x39, 0x85, 0x6c, 0xcf, 0xb5, 0xfc, 0xb2, 0xaf, 0xfb, 0x43, 0x2f, 0xf0, 0x88, 0xca,
	0x1c, 0x7b, 0xe4, 0x79, 0xb6, 0xce, 0x47, 0xe6, 0xb0, 0xaf, 0x87, 0xdf, 0x8e, 0x88, 0xd5, 0xf3,
	0x2c, 0xc3, 0xb7, 0x8c, 0xc5, 0x33, 0x54, 0x6a, 0x3f, 0x0a, 0x24, 0xea, 0xbc, 0x43, 0x9a, 0x90,
	0x6f, 0x3b, 0x41, 0xab, 0x5b, 0xed, 0x79, 0x56, 0xdd, 0x1c, 0xb8, 0x6d, 0x87, 0x07, 0x45, 0x7c,
	0x82, 0xcf, 0xff, 0x95, 0x2f, 0xf5, 0x6d, 0x34, 0xbd, 0xce, 0x3b, 0x77, 0xf1, 0x89, 0x1a, 0x62,
	0x9b, 0x18, 0xf2, 0x04, 0x39, 0xee, 0x0c, 0xec, 0x08, 0x5a, 0x91, 0xe8, 0x8b, 0x9d, 0xe8, 0xc7,
	0xd8, 0x40, 0x0d, 0xb1, 0x0d, 0x08, 0x69, 0xc0, 0xc1, 0xda, 0xed, 0xa6, 0xfb, 0x32, 0x78, 0x2e,
	0x26, 0x24, 0xb6, 0xb4, 0xff, 0xc6, 0x52, 0x5e, 0x43, 0x2c, 0x06, 0x20, 0x0f, 0xf0, 0x7f, 0x65,
	0x13, 0x12, 0x93, 0x92, 0x78, 0xb6, 0xf7, 0xa2, 0x2b, 0x60, 0x74, 0xbc, 0x9a, 0x82, 0x44, 0x9f,
	0x77, 0xb4, 0x2b, 0x50, 0xb7, 0xe5, 0x45, 0x4e, 0x41, 0x71, 0xed, 0x65, 0xce, 0xea, 0xda, 0x43,
	0xf6, 0xb3, 0xd0, 0xdd, 0xdf, 0x32, 0xc5, 0xb5, 0x35, 0x13, 0x0e, 0xb7, 0x44, 0x42, 0xca, 0x90,
	0xe9, 0x47, 0xab, 0x2a, 0x44, 0x11, 0x2b, 0x25, 0x5b, 0xeb, 0x48, 0x01, 0xd2, 0xce, 0x9b, 0xcb,
	0x03, 0x2e, 0x1b, 0xc8, 0xb0, 0xe5, 0x49, 0x2b, 0x41, 0x7e, 0x23, 0x1e, 0x42, 0x20, 0xc9, 0xbb,
	0x66, 0x45, 0xc2, 0xb3, 0x4c, 0xbe, 0x6b, 0xd7, 0x90, 0x8b, 0x6f, 0x4d, 0x54, 0x48, 0xb5, 0x64,
	0x58, 0xa1, 0x30, 0x3c, 0xec, 0xb2, 0xaa, 0x36, 0xc6, 0x53, 0x8a, 0x26, 0x53, 0x8a, 0xe6, 0x53,
	0x8a, 0xdf, 0x05, 0xc5, 0x9f, 0x82, 0xe2, 0x2f, 0x41, 0xf1, 0x58, 0x50, 0xfc, 0x2d, 0x28, 0xfe,
	0x15, 0x14, 0xcd, 0x05, 0xc5, 0x1f, 0x33, 0x8a, 0xc6, 0x33, 0x8a, 0x26, 0x33, 0x8a, 0x9a, 0xc7,
	0xc3, 0xe5, 0x66, 0xb6, 0xf3, 0x6a, 0xc8, 0x12, 0x8c, 0xb0, 0x04, 0xc3, 0xb7, 0xac, 0xb4, 0xfc,
	0x99, 0x2b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xa0, 0xd8, 0xe1, 0x06, 0x03, 0x00, 0x00,
}

func (this *Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg)
	if !ok {
		that2, ok := that.(Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *Msg_FetchBlobManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_FetchBlobManifest)
	if !ok {
		that2, ok := that.(Msg_FetchBlobManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FetchBlobManifest.Equal(that1.FetchBlobManifest) {
		return false
	}
	return true
}
func (this *Msg_SendBlobManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_SendBlobManifest)
	if !ok {
		that2, ok := that.(Msg_SendBlobManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendBlobManifest.Equal(that1.SendBlobManifest) {
		return false
	}
	return true
}
func (this *Msg_FetchBlobChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_FetchBlobChunk)
	if !ok {
		that2, ok := that.(Msg_FetchBlobChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FetchBlobChunk.Equal(that1.FetchBlobChunk) {
		return false
	}
	return true
}
func (this *Msg_SendBlobChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_SendBlobChunk)
	if !ok {
		that2, ok := that.(Msg_SendBlobChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SendBlobChunk.Equal(that1.SendBlobChunk) {
		return false
	}
	return true
}
func (this *MsgFetchBlobManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgFetchBlobManifest)
	if !ok {
		that2, ok := that.(MsgFetchBlobManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *MsgSendBlobManifest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSendBlobManifest)
	if !ok {
		that2, ok := that.(MsgSendBlobManifest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Manifest.Equal(that1.Manifest) {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	return true
}
func (this *MsgFetchBlobChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgFetchBlobChunk)
	if !ok {
		that2, ok := that.(MsgFetchBlobChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sha3, that1.Sha3) {
		return false
	}
	return true
}
func (this *MsgSendBlobChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSendBlobChunk)
	if !ok {
		that2, ok := that.(MsgSendBlobChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Chunk, that1.Chunk) {
		return false
	}
	if this.Exists != that1.Exists {
		return false
	}
	return true
}
func (this *Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Msg{")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Msg_FetchBlobManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Msg_FetchBlobManifest{` +
		`FetchBlobManifest:` + fmt.Sprintf("%#v", this.FetchBlobManifest) + `}`}, ", ")
	return s
}
func (this *Msg_SendBlobManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Msg_SendBlobManifest{` +
		`SendBlobManifest:` + fmt.Sprintf("%#v", this.SendBlobManifest) + `}`}, ", ")
	return s
}
func (this *Msg_FetchBlobChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Msg_FetchBlobChunk{` +
		`FetchBlobChunk:` + fmt.Sprintf("%#v", this.FetchBlobChunk) + `}`}, ", ")
	return s
}
func (this *Msg_SendBlobChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Msg_SendBlobChunk{` +
		`SendBlobChunk:` + fmt.Sprintf("%#v", this.SendBlobChunk) + `}`}, ", ")
	return s
}
func (this *MsgFetchBlobManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MsgFetchBlobManifest{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgSendBlobManifest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MsgSendBlobManifest{")
	if this.Manifest != nil {
		s = append(s, "Manifest: "+fmt.Sprintf("%#v", this.Manifest)+",\n")
	}
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgFetchBlobChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MsgFetchBlobChunk{")
	s = append(s, "Sha3: "+fmt.Sprintf("%#v", this.Sha3)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgSendBlobChunk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MsgSendBlobChunk{")
	s = append(s, "Chunk: "+fmt.Sprintf("%#v", this.Chunk)+",\n")
	s = append(s, "Exists: "+fmt.Sprintf("%#v", this.Exists)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLibp2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Msg_FetchBlobManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_FetchBlobManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchBlobManifest != nil {
		{
			size, err := m.FetchBlobManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Msg_SendBlobManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_SendBlobManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendBlobManifest != nil {
		{
			size, err := m.SendBlobManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Msg_FetchBlobChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_FetchBlobChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FetchBlobChunk != nil {
		{
			size, err := m.FetchBlobChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Msg_SendBlobChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg_SendBlobChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SendBlobChunk != nil {
		{
			size, err := m.SendBlobChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgFetchBlobManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchBlobManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchBlobManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendBlobManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendBlobManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendBlobManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Manifest != nil {
		{
			size, err := m.Manifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLibp2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFetchBlobChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFetchBlobChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFetchBlobChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sha3) > 0 {
		i -= len(m.Sha3)
		copy(dAtA[i:], m.Sha3)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Sha3)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendBlobChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendBlobChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendBlobChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chunk) > 0 {
		i -= len(m.Chunk)
		copy(dAtA[i:], m.Chunk)
		i = encodeVarintLibp2P(dAtA, i, uint64(len(m.Chunk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLibp2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovLibp2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *Msg_FetchBlobManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchBlobManifest != nil {
		l = m.FetchBlobManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *Msg_SendBlobManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendBlobManifest != nil {
		l = m.SendBlobManifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *Msg_FetchBlobChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FetchBlobChunk != nil {
		l = m.FetchBlobChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *Msg_SendBlobChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendBlobChunk != nil {
		l = m.SendBlobChunk.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}
func (m *MsgFetchBlobManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *MsgSendBlobManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Manifest != nil {
		l = m.Manifest.Size()
		n += 1 + l + sovLibp2P(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *MsgFetchBlobChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha3)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	return n
}

func (m *MsgSendBlobChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovLibp2P(uint64(l))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func sovLibp2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLibp2P(x uint64) (n int) {
	return sovLibp2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_FetchBlobManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_FetchBlobManifest{`,
		`FetchBlobManifest:` + strings.Replace(fmt.Sprintf("%v", this.FetchBlobManifest), "MsgFetchBlobManifest", "MsgFetchBlobManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_SendBlobManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_SendBlobManifest{`,
		`SendBlobManifest:` + strings.Replace(fmt.Sprintf("%v", this.SendBlobManifest), "MsgSendBlobManifest", "MsgSendBlobManifest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_FetchBlobChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_FetchBlobChunk{`,
		`FetchBlobChunk:` + strings.Replace(fmt.Sprintf("%v", this.FetchBlobChunk), "MsgFetchBlobChunk", "MsgFetchBlobChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_SendBlobChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_SendBlobChunk{`,
		`SendBlobChunk:` + strings.Replace(fmt.Sprintf("%v", this.SendBlobChunk), "MsgSendBlobChunk", "MsgSendBlobChunk", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgFetchBlobManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgFetchBlobManifest{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "BlobID", "pb.BlobID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgSendBlobManifest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgSendBlobManifest{`,
		`Manifest:` + strings.Replace(fmt.Sprintf("%v", this.Manifest), "Manifest", "pb.Manifest", 1) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgFetchBlobChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgFetchBlobChunk{`,
		`Sha3:` + fmt.Sprintf("%v", this.Sha3) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgSendBlobChunk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgSendBlobChunk{`,
		`Chunk:` + fmt.Sprintf("%v", this.Chunk) + `,`,
		`Exists:` + fmt.Sprintf("%v", this.Exists) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLibp2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchBlobManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgFetchBlobManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_FetchBlobManifest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendBlobManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgSendBlobManifest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_SendBlobManifest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchBlobChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgFetchBlobChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_FetchBlobChunk{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendBlobChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgSendBlobChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_SendBlobChunk{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFetchBlobManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchBlobManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchBlobManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &pb.BlobID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendBlobManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendBlobManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendBlobManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Manifest == nil {
				m.Manifest = &pb.Manifest{}
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFetchBlobChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFetchBlobChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFetchBlobChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha3", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha3 = append(m.Sha3[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha3 == nil {
				m.Sha3 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendBlobChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendBlobChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendBlobChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLibp2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLibp2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLibp2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibp2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLibp2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLibp2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibp2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLibp2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLibp2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLibp2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLibp2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLibp2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLibp2P = fmt.Errorf("proto: unexpected end of group")
)
