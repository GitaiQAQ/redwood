// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	crypto "redwood.dev/crypto"

	swarm "redwood.dev/swarm"

	types "redwood.dev/types"
)

// PeerStore is an autogenerated mock type for the PeerStore type
type PeerStore struct {
	mock.Mock
}

// AddDialInfo provides a mock function with given fields: dialInfo, deviceUniqueID
func (_m *PeerStore) AddDialInfo(dialInfo swarm.PeerDialInfo, deviceUniqueID string) swarm.PeerDetails {
	ret := _m.Called(dialInfo, deviceUniqueID)

	var r0 swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string) swarm.PeerDetails); ok {
		r0 = rf(dialInfo, deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerDetails)
		}
	}

	return r0
}

// AddVerifiedCredentials provides a mock function with given fields: dialInfo, deviceUniqueID, address, sigpubkey, encpubkey
func (_m *PeerStore) AddVerifiedCredentials(dialInfo swarm.PeerDialInfo, deviceUniqueID string, address types.Address, sigpubkey crypto.SigningPublicKey, encpubkey crypto.AsymEncPubkey) swarm.PeerDetails {
	ret := _m.Called(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)

	var r0 swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string, types.Address, crypto.SigningPublicKey, crypto.AsymEncPubkey) swarm.PeerDetails); ok {
		r0 = rf(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerDetails)
		}
	}

	return r0
}

// AllDialInfos provides a mock function with given fields:
func (_m *PeerStore) AllDialInfos() []swarm.PeerDialInfo {
	ret := _m.Called()

	var r0 []swarm.PeerDialInfo
	if rf, ok := ret.Get(0).(func() []swarm.PeerDialInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDialInfo)
		}
	}

	return r0
}

// IsKnownPeer provides a mock function with given fields: dialInfo
func (_m *PeerStore) IsKnownPeer(dialInfo swarm.PeerDialInfo) bool {
	ret := _m.Called(dialInfo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) bool); ok {
		r0 = rf(dialInfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnNewUnverifiedPeer provides a mock function with given fields: fn
func (_m *PeerStore) OnNewUnverifiedPeer(fn func(swarm.PeerDialInfo)) {
	_m.Called(fn)
}

// PeerWithDialInfo provides a mock function with given fields: dialInfo
func (_m *PeerStore) PeerWithDialInfo(dialInfo swarm.PeerDialInfo) swarm.PeerDetails {
	ret := _m.Called(dialInfo)

	var r0 swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) swarm.PeerDetails); ok {
		r0 = rf(dialInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerDetails)
		}
	}

	return r0
}

// Peers provides a mock function with given fields:
func (_m *PeerStore) Peers() []swarm.PeerDetails {
	ret := _m.Called()

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func() []swarm.PeerDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// PeersFromTransport provides a mock function with given fields: transportName
func (_m *PeerStore) PeersFromTransport(transportName string) []swarm.PeerDetails {
	ret := _m.Called(transportName)

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerDetails); ok {
		r0 = rf(transportName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// PeersFromTransportWithAddress provides a mock function with given fields: transportName, address
func (_m *PeerStore) PeersFromTransportWithAddress(transportName string, address types.Address) []swarm.PeerDetails {
	ret := _m.Called(transportName, address)

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(string, types.Address) []swarm.PeerDetails); ok {
		r0 = rf(transportName, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// PeersServingStateURI provides a mock function with given fields: stateURI
func (_m *PeerStore) PeersServingStateURI(stateURI string) []swarm.PeerDetails {
	ret := _m.Called(stateURI)

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerDetails); ok {
		r0 = rf(stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// PeersWithAddress provides a mock function with given fields: address
func (_m *PeerStore) PeersWithAddress(address types.Address) []swarm.PeerDetails {
	ret := _m.Called(address)

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(types.Address) []swarm.PeerDetails); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// PeersWithDeviceUniqueID provides a mock function with given fields: deviceUniqueID
func (_m *PeerStore) PeersWithDeviceUniqueID(deviceUniqueID string) []swarm.PeerDetails {
	ret := _m.Called(deviceUniqueID)

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerDetails); ok {
		r0 = rf(deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}

// RemovePeers provides a mock function with given fields: dialInfos
func (_m *PeerStore) RemovePeers(dialInfos []swarm.PeerDialInfo) error {
	ret := _m.Called(dialInfos)

	var r0 error
	if rf, ok := ret.Get(0).(func([]swarm.PeerDialInfo) error); ok {
		r0 = rf(dialInfos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnverifiedPeers provides a mock function with given fields:
func (_m *PeerStore) UnverifiedPeers() []swarm.PeerDetails {
	ret := _m.Called()

	var r0 []swarm.PeerDetails
	if rf, ok := ret.Get(0).(func() []swarm.PeerDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDetails)
		}
	}

	return r0
}
