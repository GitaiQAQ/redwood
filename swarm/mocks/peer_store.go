// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	crypto "redwood.dev/crypto"

	swarm "redwood.dev/swarm"

	types "redwood.dev/types"
)

// PeerStore is an autogenerated mock type for the PeerStore type
type PeerStore struct {
	mock.Mock
}

// AddDialInfo provides a mock function with given fields: dialInfo, deviceUniqueID
func (_m *PeerStore) AddDialInfo(dialInfo swarm.PeerDialInfo, deviceUniqueID string) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo, deviceUniqueID)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo, deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// AddVerifiedCredentials provides a mock function with given fields: dialInfo, deviceUniqueID, address, sigpubkey, encpubkey
func (_m *PeerStore) AddVerifiedCredentials(dialInfo swarm.PeerDialInfo, deviceUniqueID string, address types.Address, sigpubkey *crypto.SigningPublicKey, encpubkey *crypto.AsymEncPubkey) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo, string, types.Address, *crypto.SigningPublicKey, *crypto.AsymEncPubkey) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo, deviceUniqueID, address, sigpubkey, encpubkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// AllDialInfos provides a mock function with given fields:
func (_m *PeerStore) AllDialInfos() map[swarm.PeerDialInfo]struct{} {
	ret := _m.Called()

	var r0 map[swarm.PeerDialInfo]struct{}
	if rf, ok := ret.Get(0).(func() map[swarm.PeerDialInfo]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[swarm.PeerDialInfo]struct{})
		}
	}

	return r0
}

// DebugPrint provides a mock function with given fields:
func (_m *PeerStore) DebugPrint() {
	_m.Called()
}

// IsKnownPeer provides a mock function with given fields: dialInfo
func (_m *PeerStore) IsKnownPeer(dialInfo swarm.PeerDialInfo) bool {
	ret := _m.Called(dialInfo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) bool); ok {
		r0 = rf(dialInfo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnNewUnverifiedPeer provides a mock function with given fields: fn
func (_m *PeerStore) OnNewUnverifiedPeer(fn func(swarm.PeerDialInfo)) {
	_m.Called(fn)
}

// OnNewVerifiedPeer provides a mock function with given fields: fn
func (_m *PeerStore) OnNewVerifiedPeer(fn func(swarm.PeerInfo)) {
	_m.Called(fn)
}

// PeerEndpoint provides a mock function with given fields: dialInfo
func (_m *PeerStore) PeerEndpoint(dialInfo swarm.PeerDialInfo) swarm.PeerEndpoint {
	ret := _m.Called(dialInfo)

	var r0 swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(swarm.PeerDialInfo) swarm.PeerEndpoint); ok {
		r0 = rf(dialInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerEndpoint)
		}
	}

	return r0
}

// PeerWithDeviceUniqueID provides a mock function with given fields: deviceUniqueID
func (_m *PeerStore) PeerWithDeviceUniqueID(deviceUniqueID string) (swarm.PeerInfo, bool) {
	ret := _m.Called(deviceUniqueID)

	var r0 swarm.PeerInfo
	if rf, ok := ret.Get(0).(func(string) swarm.PeerInfo); ok {
		r0 = rf(deviceUniqueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerInfo)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(deviceUniqueID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Peers provides a mock function with given fields:
func (_m *PeerStore) Peers() []swarm.PeerInfo {
	ret := _m.Called()

	var r0 []swarm.PeerInfo
	if rf, ok := ret.Get(0).(func() []swarm.PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerInfo)
		}
	}

	return r0
}

// PeersFromTransport provides a mock function with given fields: transportName
func (_m *PeerStore) PeersFromTransport(transportName string) []swarm.PeerEndpoint {
	ret := _m.Called(transportName)

	var r0 []swarm.PeerEndpoint
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerEndpoint); ok {
		r0 = rf(transportName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerEndpoint)
		}
	}

	return r0
}

// PeersServingStateURI provides a mock function with given fields: stateURI
func (_m *PeerStore) PeersServingStateURI(stateURI string) []swarm.PeerInfo {
	ret := _m.Called(stateURI)

	var r0 []swarm.PeerInfo
	if rf, ok := ret.Get(0).(func(string) []swarm.PeerInfo); ok {
		r0 = rf(stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerInfo)
		}
	}

	return r0
}

// PeersWithAddress provides a mock function with given fields: address
func (_m *PeerStore) PeersWithAddress(address types.Address) []swarm.PeerInfo {
	ret := _m.Called(address)

	var r0 []swarm.PeerInfo
	if rf, ok := ret.Get(0).(func(types.Address) []swarm.PeerInfo); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerInfo)
		}
	}

	return r0
}

// RemovePeers provides a mock function with given fields: deviceUniqueIDs
func (_m *PeerStore) RemovePeers(deviceUniqueIDs []string) error {
	ret := _m.Called(deviceUniqueIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(deviceUniqueIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnverifiedPeers provides a mock function with given fields:
func (_m *PeerStore) UnverifiedPeers() []swarm.PeerDialInfo {
	ret := _m.Called()

	var r0 []swarm.PeerDialInfo
	if rf, ok := ret.Get(0).(func() []swarm.PeerDialInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerDialInfo)
		}
	}

	return r0
}

// VerifiedPeers provides a mock function with given fields:
func (_m *PeerStore) VerifiedPeers() []swarm.PeerInfo {
	ret := _m.Called()

	var r0 []swarm.PeerInfo
	if rf, ok := ret.Get(0).(func() []swarm.PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.PeerInfo)
		}
	}

	return r0
}
