// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	swarm "redwood.dev/swarm"

	types "redwood.dev/types"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

// AnnounceRef provides a mock function with given fields: ctx, refID
func (_m *Transport) AnnounceRef(ctx context.Context, refID types.RefID) error {
	ret := _m.Called(ctx, refID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RefID) error); ok {
		r0 = rf(ctx, refID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Transport) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *Transport) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPeerConn provides a mock function with given fields: ctx, dialAddr
func (_m *Transport) NewPeerConn(ctx context.Context, dialAddr string) (swarm.Peer, error) {
	ret := _m.Called(ctx, dialAddr)

	var r0 swarm.Peer
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.Peer); ok {
		r0 = rf(ctx, dialAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.Peer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dialAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeersClaimingAddress provides a mock function with given fields: ctx, address
func (_m *Transport) PeersClaimingAddress(ctx context.Context, address types.Address) (<-chan swarm.Peer, error) {
	ret := _m.Called(ctx, address)

	var r0 <-chan swarm.Peer
	if rf, ok := ret.Get(0).(func(context.Context, types.Address) <-chan swarm.Peer); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan swarm.Peer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvidersOfRef provides a mock function with given fields: ctx, refID
func (_m *Transport) ProvidersOfRef(ctx context.Context, refID types.RefID) (<-chan swarm.Peer, error) {
	ret := _m.Called(ctx, refID)

	var r0 <-chan swarm.Peer
	if rf, ok := ret.Get(0).(func(context.Context, types.RefID) <-chan swarm.Peer); ok {
		r0 = rf(ctx, refID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan swarm.Peer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.RefID) error); ok {
		r1 = rf(ctx, refID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvidersOfStateURI provides a mock function with given fields: ctx, stateURI
func (_m *Transport) ProvidersOfStateURI(ctx context.Context, stateURI string) (<-chan swarm.Peer, error) {
	ret := _m.Called(ctx, stateURI)

	var r0 <-chan swarm.Peer
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan swarm.Peer); ok {
		r0 = rf(ctx, stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan swarm.Peer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, stateURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetHost provides a mock function with given fields: host
func (_m *Transport) SetHost(host swarm.Host) {
	_m.Called(host)
}

// Start provides a mock function with given fields:
func (_m *Transport) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
