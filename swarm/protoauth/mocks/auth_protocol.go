// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protoauth "redwood.dev/swarm/protoauth"

	types "redwood.dev/types"
)

// AuthProtocol is an autogenerated mock type for the AuthProtocol type
type AuthProtocol struct {
	mock.Mock
}

// ChallengePeerIdentity provides a mock function with given fields: ctx, peerConn
func (_m *AuthProtocol) ChallengePeerIdentity(ctx context.Context, peerConn protoauth.AuthPeerConn) error {
	ret := _m.Called(ctx, peerConn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, protoauth.AuthPeerConn) error); ok {
		r0 = rf(ctx, peerConn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *AuthProtocol) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *AuthProtocol) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PeersClaimingAddress provides a mock function with given fields: ctx, address
func (_m *AuthProtocol) PeersClaimingAddress(ctx context.Context, address types.Address) <-chan protoauth.AuthPeerConn {
	ret := _m.Called(ctx, address)

	var r0 <-chan protoauth.AuthPeerConn
	if rf, ok := ret.Get(0).(func(context.Context, types.Address) <-chan protoauth.AuthPeerConn); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoauth.AuthPeerConn)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *AuthProtocol) Start() {
	_m.Called()
}
