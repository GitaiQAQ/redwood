// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protoauth "redwood.dev/swarm/protoauth"

	swarm "redwood.dev/swarm"

	types "redwood.dev/types"
)

// AuthTransport is an autogenerated mock type for the AuthTransport type
type AuthTransport struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AuthTransport) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *AuthTransport) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPeerConn provides a mock function with given fields: ctx, dialAddr
func (_m *AuthTransport) NewPeerConn(ctx context.Context, dialAddr string) (swarm.PeerConn, error) {
	ret := _m.Called(ctx, dialAddr)

	var r0 swarm.PeerConn
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.PeerConn); ok {
		r0 = rf(ctx, dialAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dialAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnChallengeIdentity provides a mock function with given fields: handler
func (_m *AuthTransport) OnChallengeIdentity(handler protoauth.ChallengeIdentityCallback) {
	_m.Called(handler)
}

// PeersClaimingAddress provides a mock function with given fields: ctx, address
func (_m *AuthTransport) PeersClaimingAddress(ctx context.Context, address types.Address) (<-chan protoauth.AuthPeerConn, error) {
	ret := _m.Called(ctx, address)

	var r0 <-chan protoauth.AuthPeerConn
	if rf, ok := ret.Get(0).(func(context.Context, types.Address) <-chan protoauth.AuthPeerConn); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoauth.AuthPeerConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *AuthTransport) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
