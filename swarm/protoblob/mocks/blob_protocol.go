// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "redwood.dev/blob"

	mock "github.com/stretchr/testify/mock"

	protoblob "redwood.dev/swarm/protoblob"
)

// BlobProtocol is an autogenerated mock type for the BlobProtocol type
type BlobProtocol struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BlobProtocol) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *BlobProtocol) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProvidersOfBlob provides a mock function with given fields: ctx, blobID
func (_m *BlobProtocol) ProvidersOfBlob(ctx context.Context, blobID blob.ID) <-chan protoblob.BlobPeerConn {
	ret := _m.Called(ctx, blobID)

	var r0 <-chan protoblob.BlobPeerConn
	if rf, ok := ret.Get(0).(func(context.Context, blob.ID) <-chan protoblob.BlobPeerConn); ok {
		r0 = rf(ctx, blobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoblob.BlobPeerConn)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *BlobProtocol) Start() {
	_m.Called()
}
