// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "redwood.dev/blob"

	mock "github.com/stretchr/testify/mock"

	protoblob "redwood.dev/swarm/protoblob"

	swarm "redwood.dev/swarm"
)

// BlobTransport is an autogenerated mock type for the BlobTransport type
type BlobTransport struct {
	mock.Mock
}

// AnnounceBlob provides a mock function with given fields: ctx, blobID
func (_m *BlobTransport) AnnounceBlob(ctx context.Context, blobID blob.ID) error {
	ret := _m.Called(ctx, blobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, blob.ID) error); ok {
		r0 = rf(ctx, blobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *BlobTransport) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *BlobTransport) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPeerConn provides a mock function with given fields: ctx, dialAddr
func (_m *BlobTransport) NewPeerConn(ctx context.Context, dialAddr string) (swarm.PeerConn, error) {
	ret := _m.Called(ctx, dialAddr)

	var r0 swarm.PeerConn
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.PeerConn); ok {
		r0 = rf(ctx, dialAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(swarm.PeerConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, dialAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnBlobRequest provides a mock function with given fields: handler
func (_m *BlobTransport) OnBlobRequest(handler func(blob.ID, protoblob.BlobPeerConn)) {
	_m.Called(handler)
}

// ProvidersOfBlob provides a mock function with given fields: ctx, blobID
func (_m *BlobTransport) ProvidersOfBlob(ctx context.Context, blobID blob.ID) (<-chan protoblob.BlobPeerConn, error) {
	ret := _m.Called(ctx, blobID)

	var r0 <-chan protoblob.BlobPeerConn
	if rf, ok := ret.Get(0).(func(context.Context, blob.ID) <-chan protoblob.BlobPeerConn); ok {
		r0 = rf(ctx, blobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan protoblob.BlobPeerConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, blob.ID) error); ok {
		r1 = rf(ctx, blobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *BlobTransport) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
