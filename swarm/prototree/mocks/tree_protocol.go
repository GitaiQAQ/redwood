// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	prototree "redwood.dev/swarm/prototree"

	state "redwood.dev/state"

	tree "redwood.dev/tree"
)

// TreeProtocol is an autogenerated mock type for the TreeProtocol type
type TreeProtocol struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *TreeProtocol) Close() {
	_m.Called()
}

// Name provides a mock function with given fields:
func (_m *TreeProtocol) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ProvidersOfStateURI provides a mock function with given fields: ctx, stateURI
func (_m *TreeProtocol) ProvidersOfStateURI(ctx context.Context, stateURI string) <-chan prototree.TreePeerConn {
	ret := _m.Called(ctx, stateURI)

	var r0 <-chan prototree.TreePeerConn
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan prototree.TreePeerConn); ok {
		r0 = rf(ctx, stateURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan prototree.TreePeerConn)
		}
	}

	return r0
}

// SendTx provides a mock function with given fields: ctx, tx
func (_m *TreeProtocol) SendTx(ctx context.Context, tx tree.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tree.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *TreeProtocol) Start() {
	_m.Called()
}

// Subscribe provides a mock function with given fields: ctx, stateURI, subscriptionType, keypath, fetchHistoryOpts
func (_m *TreeProtocol) Subscribe(ctx context.Context, stateURI string, subscriptionType prototree.SubscriptionType, keypath state.Keypath, fetchHistoryOpts *prototree.FetchHistoryOpts) (prototree.ReadableSubscription, error) {
	ret := _m.Called(ctx, stateURI, subscriptionType, keypath, fetchHistoryOpts)

	var r0 prototree.ReadableSubscription
	if rf, ok := ret.Get(0).(func(context.Context, string, prototree.SubscriptionType, state.Keypath, *prototree.FetchHistoryOpts) prototree.ReadableSubscription); ok {
		r0 = rf(ctx, stateURI, subscriptionType, keypath, fetchHistoryOpts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prototree.ReadableSubscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, prototree.SubscriptionType, state.Keypath, *prototree.FetchHistoryOpts) error); ok {
		r1 = rf(ctx, stateURI, subscriptionType, keypath, fetchHistoryOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeStateURIs provides a mock function with given fields:
func (_m *TreeProtocol) SubscribeStateURIs() prototree.StateURISubscription {
	ret := _m.Called()

	var r0 prototree.StateURISubscription
	if rf, ok := ret.Get(0).(func() prototree.StateURISubscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prototree.StateURISubscription)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: stateURI
func (_m *TreeProtocol) Unsubscribe(stateURI string) error {
	ret := _m.Called(stateURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(stateURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
