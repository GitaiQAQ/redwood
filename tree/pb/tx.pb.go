// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tx struct {
	Id         []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Parents    [][]byte `protobuf:"bytes,2,rep,name=parents,proto3" json:"parents,omitempty"`
	Children   [][]byte `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	From       []byte   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Sig        []byte   `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	StateURI   string   `protobuf:"bytes,6,opt,name=stateURI,proto3" json:"stateURI,omitempty"`
	Patches    []*Patch `protobuf:"bytes,7,rep,name=patches,proto3" json:"patches,omitempty"`
	Recipients [][]byte `protobuf:"bytes,8,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Checkpoint bool     `protobuf:"varint,9,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Attachment []byte   `protobuf:"bytes,10,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Status     string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Confidence uint64   `protobuf:"varint,12,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (m *Tx) Reset()      { *m = Tx{} }
func (*Tx) ProtoMessage() {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Tx) GetParents() [][]byte {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Tx) GetChildren() [][]byte {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Tx) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Tx) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Tx) GetStateURI() string {
	if m != nil {
		return m.StateURI
	}
	return ""
}

func (m *Tx) GetPatches() []*Patch {
	if m != nil {
		return m.Patches
	}
	return nil
}

func (m *Tx) GetRecipients() [][]byte {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *Tx) GetCheckpoint() bool {
	if m != nil {
		return m.Checkpoint
	}
	return false
}

func (m *Tx) GetAttachment() []byte {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (m *Tx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Tx) GetConfidence() uint64 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type Patch struct {
	Keypath []byte     `protobuf:"bytes,1,opt,name=keypath,proto3" json:"keypath,omitempty"`
	Range   *Range     `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Value   *types.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Patch) Reset()      { *m = Patch{} }
func (*Patch) ProtoMessage() {}
func (*Patch) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *Patch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patch.Merge(m, src)
}
func (m *Patch) XXX_Size() int {
	return m.Size()
}
func (m *Patch) XXX_DiscardUnknown() {
	xxx_messageInfo_Patch.DiscardUnknown(m)
}

var xxx_messageInfo_Patch proto.InternalMessageInfo

func (m *Patch) GetKeypath() []byte {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func (m *Patch) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Patch) GetValue() *types.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

type Range struct {
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *Range) Reset()      { *m = Range{} }
func (*Range) ProtoMessage() {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Range) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func init() {
	proto.RegisterType((*Tx)(nil), "Redwood.tree.Tx")
	proto.RegisterType((*Patch)(nil), "Redwood.tree.Patch")
	proto.RegisterType((*Range)(nil), "Redwood.tree.Range")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0x8f, 0x93, 0xe6, 0xae, 0xe7, 0xab, 0x10, 0x32, 0x27, 0x30, 0x1d, 0x4c, 0x74, 0x53, 0x40,
	0xba, 0x54, 0x82, 0x8d, 0x0d, 0x36, 0x36, 0x64, 0xc1, 0x82, 0xc4, 0xe0, 0x26, 0x6e, 0x62, 0x5d,
	0x6b, 0x47, 0x8e, 0x7b, 0x5c, 0x17, 0xc4, 0x47, 0xe0, 0x23, 0x30, 0xf2, 0x11, 0x18, 0x19, 0x19,
	0x3b, 0x1e, 0xdb, 0x35, 0x5d, 0x18, 0x6f, 0xbc, 0x11, 0xf9, 0xa5, 0x3d, 0x22, 0xb1, 0xbd, 0xdf,
	0x1f, 0xbf, 0xf7, 0x7b, 0x7e, 0x78, 0xe8, 0x2e, 0xb3, 0xda, 0x1a, 0x67, 0xc8, 0x88, 0xcb, 0xe2,
	0x93, 0x31, 0x45, 0xe6, 0xac, 0x94, 0xe3, 0xb3, 0x52, 0xb9, 0x6a, 0x39, 0xcd, 0x72, 0xb3, 0x98,
	0x94, 0xa6, 0x34, 0x13, 0x30, 0x4d, 0x97, 0x33, 0x40, 0x00, 0xa0, 0xea, 0x1e, 0x8f, 0x1f, 0x97,
	0xc6, 0x94, 0x73, 0xf9, 0xcf, 0x25, 0xf4, 0xaa, 0x93, 0x4e, 0x7f, 0x87, 0x38, 0x7c, 0x77, 0x49,
	0xee, 0xe1, 0x50, 0x15, 0x14, 0x25, 0x28, 0x1d, 0xf1, 0x50, 0x15, 0x84, 0xe2, 0xc3, 0x5a, 0x58,
	0xa9, 0x5d, 0x43, 0xc3, 0x24, 0x4a, 0x47, 0x7c, 0x0f, 0xc9, 0x18, 0x0f, 0xf3, 0x4a, 0xcd, 0x0b,
	0x2b, 0x35, 0x8d, 0x40, 0xba, 0xc3, 0x84, 0xe0, 0xc1, 0xcc, 0x9a, 0x05, 0x1d, 0x40, 0x1f, 0xa8,
	0xc9, 0x7d, 0x1c, 0x35, 0xaa, 0xa4, 0x31, 0x50, 0xbe, 0xf4, 0x1d, 0x1a, 0x27, 0x9c, 0x7c, 0xcf,
	0xdf, 0xd0, 0x83, 0x04, 0xa5, 0x47, 0xfc, 0x0e, 0x93, 0x33, 0x3f, 0xd7, 0xe5, 0x95, 0x6c, 0xe8,
	0x61, 0x12, 0xa5, 0xc7, 0xcf, 0x1f, 0x64, 0xfd, 0xc5, 0xb3, 0xb7, 0x5e, 0xe4, 0x7b, 0x0f, 0x61,
	0x18, 0x5b, 0x99, 0xab, 0x5a, 0x41, 0xd2, 0x21, 0xc4, 0xe9, 0x31, 0x5e, 0xcf, 0x2b, 0x99, 0x9f,
	0xd7, 0x46, 0x69, 0x47, 0x8f, 0x12, 0x94, 0x0e, 0x79, 0x8f, 0xf1, 0xba, 0x70, 0x4e, 0xe4, 0xd5,
	0x42, 0x6a, 0x47, 0x31, 0x64, 0xec, 0x31, 0xe4, 0x21, 0x3e, 0xf0, 0xd1, 0x96, 0x0d, 0x3d, 0x86,
	0xa0, 0x3b, 0x04, 0x7d, 0x8d, 0x9e, 0xa9, 0x42, 0xea, 0x5c, 0xd2, 0x51, 0x82, 0xd2, 0x01, 0xef,
	0x31, 0x2f, 0x07, 0xb7, 0xdf, 0x9e, 0x04, 0xa7, 0x9f, 0x71, 0x0c, 0x79, 0xfd, 0x6f, 0x9e, 0xcb,
	0x55, 0x2d, 0x5c, 0xb5, 0xfb, 0xe2, 0x3d, 0x24, 0x4f, 0x71, 0x6c, 0x85, 0x2e, 0x25, 0x0d, 0x13,
	0xf4, 0xff, 0xb6, 0xdc, 0x4b, 0xbc, 0x73, 0x90, 0x67, 0x38, 0xbe, 0x10, 0xf3, 0xa5, 0xa4, 0x11,
	0x58, 0x4f, 0xb2, 0xee, 0xa8, 0xd9, 0xfe, 0xa8, 0xd9, 0x2b, 0xbd, 0xe2, 0x9d, 0x65, 0x37, 0x7f,
	0x82, 0x63, 0xe8, 0x40, 0x4e, 0x70, 0xdc, 0x38, 0x61, 0x1d, 0x4c, 0x8f, 0x78, 0x07, 0xfc, 0x65,
	0xa4, 0x2e, 0x60, 0x72, 0xc4, 0x7d, 0xf9, 0xfa, 0xe3, 0x7a, 0xc3, 0x82, 0xab, 0x0d, 0x0b, 0xae,
	0x37, 0x0c, 0xdd, 0x6c, 0x18, 0xba, 0xdd, 0x30, 0xf4, 0xa5, 0x65, 0xe8, 0x7b, 0xcb, 0xd0, 0x8f,
	0x96, 0xa1, 0x9f, 0x2d, 0x43, 0xbf, 0x5a, 0x86, 0xd6, 0x2d, 0x43, 0xd7, 0x2d, 0x43, 0x7f, 0x5a,
	0x16, 0xdc, 0xb4, 0x0c, 0x7d, 0xdd, 0xb2, 0x60, 0xbd, 0x65, 0xc1, 0xd5, 0x96, 0x05, 0x1f, 0x1e,
	0xd9, 0xdd, 0x0e, 0x85, 0xbc, 0x98, 0x28, 0xed, 0xa4, 0xd5, 0x62, 0x3e, 0xa9, 0xa7, 0xd3, 0x03,
	0x88, 0xfa, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x86, 0x83, 0x56, 0xd6, 0x02, 0x00,
	0x00,
}

func (this *Tx) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Tx)
	if !ok {
		that2, ok := that.(Tx)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Tx")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Tx but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Tx but is not nil && this == nil")
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Parents) != len(that1.Parents) {
		return fmt.Errorf("Parents this(%v) Not Equal that(%v)", len(this.Parents), len(that1.Parents))
	}
	for i := range this.Parents {
		if !bytes.Equal(this.Parents[i], that1.Parents[i]) {
			return fmt.Errorf("Parents this[%v](%v) Not Equal that[%v](%v)", i, this.Parents[i], i, that1.Parents[i])
		}
	}
	if len(this.Children) != len(that1.Children) {
		return fmt.Errorf("Children this(%v) Not Equal that(%v)", len(this.Children), len(that1.Children))
	}
	for i := range this.Children {
		if !bytes.Equal(this.Children[i], that1.Children[i]) {
			return fmt.Errorf("Children this[%v](%v) Not Equal that[%v](%v)", i, this.Children[i], i, that1.Children[i])
		}
	}
	if !bytes.Equal(this.From, that1.From) {
		return fmt.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.Sig, that1.Sig) {
		return fmt.Errorf("Sig this(%v) Not Equal that(%v)", this.Sig, that1.Sig)
	}
	if this.StateURI != that1.StateURI {
		return fmt.Errorf("StateURI this(%v) Not Equal that(%v)", this.StateURI, that1.StateURI)
	}
	if len(this.Patches) != len(that1.Patches) {
		return fmt.Errorf("Patches this(%v) Not Equal that(%v)", len(this.Patches), len(that1.Patches))
	}
	for i := range this.Patches {
		if !this.Patches[i].Equal(that1.Patches[i]) {
			return fmt.Errorf("Patches this[%v](%v) Not Equal that[%v](%v)", i, this.Patches[i], i, that1.Patches[i])
		}
	}
	if len(this.Recipients) != len(that1.Recipients) {
		return fmt.Errorf("Recipients this(%v) Not Equal that(%v)", len(this.Recipients), len(that1.Recipients))
	}
	for i := range this.Recipients {
		if !bytes.Equal(this.Recipients[i], that1.Recipients[i]) {
			return fmt.Errorf("Recipients this[%v](%v) Not Equal that[%v](%v)", i, this.Recipients[i], i, that1.Recipients[i])
		}
	}
	if this.Checkpoint != that1.Checkpoint {
		return fmt.Errorf("Checkpoint this(%v) Not Equal that(%v)", this.Checkpoint, that1.Checkpoint)
	}
	if !bytes.Equal(this.Attachment, that1.Attachment) {
		return fmt.Errorf("Attachment this(%v) Not Equal that(%v)", this.Attachment, that1.Attachment)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Confidence != that1.Confidence {
		return fmt.Errorf("Confidence this(%v) Not Equal that(%v)", this.Confidence, that1.Confidence)
	}
	return nil
}
func (this *Tx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tx)
	if !ok {
		that2, ok := that.(Tx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if len(this.Parents) != len(that1.Parents) {
		return false
	}
	for i := range this.Parents {
		if !bytes.Equal(this.Parents[i], that1.Parents[i]) {
			return false
		}
	}
	if len(this.Children) != len(that1.Children) {
		return false
	}
	for i := range this.Children {
		if !bytes.Equal(this.Children[i], that1.Children[i]) {
			return false
		}
	}
	if !bytes.Equal(this.From, that1.From) {
		return false
	}
	if !bytes.Equal(this.Sig, that1.Sig) {
		return false
	}
	if this.StateURI != that1.StateURI {
		return false
	}
	if len(this.Patches) != len(that1.Patches) {
		return false
	}
	for i := range this.Patches {
		if !this.Patches[i].Equal(that1.Patches[i]) {
			return false
		}
	}
	if len(this.Recipients) != len(that1.Recipients) {
		return false
	}
	for i := range this.Recipients {
		if !bytes.Equal(this.Recipients[i], that1.Recipients[i]) {
			return false
		}
	}
	if this.Checkpoint != that1.Checkpoint {
		return false
	}
	if !bytes.Equal(this.Attachment, that1.Attachment) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Confidence != that1.Confidence {
		return false
	}
	return true
}
func (this *Patch) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Patch)
	if !ok {
		that2, ok := that.(Patch)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Patch")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Patch but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Patch but is not nil && this == nil")
	}
	if !bytes.Equal(this.Keypath, that1.Keypath) {
		return fmt.Errorf("Keypath this(%v) Not Equal that(%v)", this.Keypath, that1.Keypath)
	}
	if !this.Range.Equal(that1.Range) {
		return fmt.Errorf("Range this(%v) Not Equal that(%v)", this.Range, that1.Range)
	}
	if !this.Value.Equal(that1.Value) {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *Patch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Patch)
	if !ok {
		that2, ok := that.(Patch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Keypath, that1.Keypath) {
		return false
	}
	if !this.Range.Equal(that1.Range) {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Range) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Range)
	if !ok {
		that2, ok := that.(Range)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Range")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Range but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Range but is not nil && this == nil")
	}
	if this.Start != that1.Start {
		return fmt.Errorf("Start this(%v) Not Equal that(%v)", this.Start, that1.Start)
	}
	if this.End != that1.End {
		return fmt.Errorf("End this(%v) Not Equal that(%v)", this.End, that1.End)
	}
	return nil
}
func (this *Range) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Range)
	if !ok {
		that2, ok := that.(Range)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	return true
}
func (this *Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.Tx{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Parents: "+fmt.Sprintf("%#v", this.Parents)+",\n")
	s = append(s, "Children: "+fmt.Sprintf("%#v", this.Children)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "StateURI: "+fmt.Sprintf("%#v", this.StateURI)+",\n")
	if this.Patches != nil {
		s = append(s, "Patches: "+fmt.Sprintf("%#v", this.Patches)+",\n")
	}
	s = append(s, "Recipients: "+fmt.Sprintf("%#v", this.Recipients)+",\n")
	s = append(s, "Checkpoint: "+fmt.Sprintf("%#v", this.Checkpoint)+",\n")
	s = append(s, "Attachment: "+fmt.Sprintf("%#v", this.Attachment)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Confidence: "+fmt.Sprintf("%#v", this.Confidence)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Patch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Patch{")
	s = append(s, "Keypath: "+fmt.Sprintf("%#v", this.Keypath)+",\n")
	if this.Range != nil {
		s = append(s, "Range: "+fmt.Sprintf("%#v", this.Range)+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Range) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Range{")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTx(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confidence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Confidence))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Attachment) > 0 {
		i -= len(m.Attachment)
		copy(dAtA[i:], m.Attachment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Attachment)))
		i--
		dAtA[i] = 0x52
	}
	if m.Checkpoint {
		i--
		if m.Checkpoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Recipients[iNdEx])
			copy(dAtA[i:], m.Recipients[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Recipients[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Patches) > 0 {
		for iNdEx := len(m.Patches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Patches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.StateURI) > 0 {
		i -= len(m.StateURI)
		copy(dAtA[i:], m.StateURI)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateURI)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Children[iNdEx])
			copy(dAtA[i:], m.Children[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Children[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Parents) > 0 {
		for iNdEx := len(m.Parents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parents[iNdEx])
			copy(dAtA[i:], m.Parents[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Parents[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Patch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keypath) > 0 {
		i -= len(m.Keypath)
		copy(dAtA[i:], m.Keypath)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Keypath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.End != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedTx(r randyTx, easy bool) *Tx {
	this := &Tx{}
	v1 := r.Intn(100)
	this.Id = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(10)
	this.Parents = make([][]byte, v2)
	for i := 0; i < v2; i++ {
		v3 := r.Intn(100)
		this.Parents[i] = make([]byte, v3)
		for j := 0; j < v3; j++ {
			this.Parents[i][j] = byte(r.Intn(256))
		}
	}
	v4 := r.Intn(10)
	this.Children = make([][]byte, v4)
	for i := 0; i < v4; i++ {
		v5 := r.Intn(100)
		this.Children[i] = make([]byte, v5)
		for j := 0; j < v5; j++ {
			this.Children[i][j] = byte(r.Intn(256))
		}
	}
	v6 := r.Intn(100)
	this.From = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.From[i] = byte(r.Intn(256))
	}
	v7 := r.Intn(100)
	this.Sig = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Sig[i] = byte(r.Intn(256))
	}
	this.StateURI = string(randStringTx(r))
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Patches = make([]*Patch, v8)
		for i := 0; i < v8; i++ {
			this.Patches[i] = NewPopulatedPatch(r, easy)
		}
	}
	v9 := r.Intn(10)
	this.Recipients = make([][]byte, v9)
	for i := 0; i < v9; i++ {
		v10 := r.Intn(100)
		this.Recipients[i] = make([]byte, v10)
		for j := 0; j < v10; j++ {
			this.Recipients[i][j] = byte(r.Intn(256))
		}
	}
	this.Checkpoint = bool(bool(r.Intn(2) == 0))
	v11 := r.Intn(100)
	this.Attachment = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Attachment[i] = byte(r.Intn(256))
	}
	this.Status = string(randStringTx(r))
	this.Confidence = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPatch(r randyTx, easy bool) *Patch {
	this := &Patch{}
	v12 := r.Intn(100)
	this.Keypath = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.Keypath[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Range = NewPopulatedRange(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Value = types.NewPopulatedAny(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRange(r randyTx, easy bool) *Range {
	this := &Range{}
	this.Start = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Start *= -1
	}
	this.End = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.End *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTx interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTx(r randyTx) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTx(r randyTx) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneTx(r)
	}
	return string(tmps)
}
func randUnrecognizedTx(r randyTx, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTx(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTx(dAtA []byte, r randyTx, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTx(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateTx(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateTx(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTx(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTx(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTx(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTx(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Parents) > 0 {
		for _, b := range m.Parents {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Children) > 0 {
		for _, b := range m.Children {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StateURI)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Patches) > 0 {
		for _, e := range m.Patches {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Recipients) > 0 {
		for _, b := range m.Recipients {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Checkpoint {
		n += 2
	}
	l = len(m.Attachment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Confidence != 0 {
		n += 1 + sovTx(uint64(m.Confidence))
	}
	return n
}

func (m *Patch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keypath)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovTx(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovTx(uint64(m.End))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Tx) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPatches := "[]*Patch{"
	for _, f := range this.Patches {
		repeatedStringForPatches += strings.Replace(f.String(), "Patch", "Patch", 1) + ","
	}
	repeatedStringForPatches += "}"
	s := strings.Join([]string{`&Tx{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Parents:` + fmt.Sprintf("%v", this.Parents) + `,`,
		`Children:` + fmt.Sprintf("%v", this.Children) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`StateURI:` + fmt.Sprintf("%v", this.StateURI) + `,`,
		`Patches:` + repeatedStringForPatches + `,`,
		`Recipients:` + fmt.Sprintf("%v", this.Recipients) + `,`,
		`Checkpoint:` + fmt.Sprintf("%v", this.Checkpoint) + `,`,
		`Attachment:` + fmt.Sprintf("%v", this.Attachment) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Confidence:` + fmt.Sprintf("%v", this.Confidence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Patch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Patch{`,
		`Keypath:` + fmt.Sprintf("%v", this.Keypath) + `,`,
		`Range:` + strings.Replace(this.Range.String(), "Range", "Range", 1) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Range) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Range{`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTx(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parents = append(m.Parents, make([]byte, postIndex-iNdEx))
			copy(m.Parents[len(m.Parents)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, make([]byte, postIndex-iNdEx))
			copy(m.Children[len(m.Children)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patches = append(m.Patches, &Patch{})
			if err := m.Patches[len(m.Patches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, make([]byte, postIndex-iNdEx))
			copy(m.Recipients[len(m.Recipients)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Checkpoint = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachment = append(m.Attachment[:0], dAtA[iNdEx:postIndex]...)
			if m.Attachment == nil {
				m.Attachment = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			m.Confidence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confidence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keypath", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keypath = append(m.Keypath[:0], dAtA[iNdEx:postIndex]...)
			if m.Keypath == nil {
				m.Keypath = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.Any{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
